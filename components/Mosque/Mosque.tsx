"use client";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 D:\Masjid\fajar-baitullah\public\models\scene.gltf -t 
*/

import React, { useRef, useState } from "react";
import * as THREE from "three";
import { useGLTF, useScroll, useTexture } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { motion } from "framer-motion-3d";
import { useFrame } from "@react-three/fiber";
import { Variants } from "framer-motion";

interface GLTFAction extends THREE.AnimationClip {}

type GLTFResult = GLTF & {
  nodes: {
    defaultMaterial: THREE.Mesh;
  };
  materials: {
    lambert2: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

// type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>>;

type PropsMosque = {
  atBuildPage: boolean;
  setAtBuildPage: React.Dispatch<React.SetStateAction<boolean>>;
} & JSX.IntrinsicElements["group"];

export default function Mosque({ atBuildPage, setAtBuildPage, ...props }: PropsMosque) {
  const { nodes, materials } = useGLTF("/models/scene.gltf") as GLTFResult;
  const baseColorTexture = useTexture("models/textures/lambert2_baseColor.png");
  baseColorTexture.flipY = false;
  const textureMaterial = new THREE.MeshStandardMaterial({
    map: baseColorTexture,
  });

  const ref: any = useRef();
  const scroll = useScroll();

  const variants: Variants = {
    initial: { x: 0, y: 0, z: 0, rotateY: 0, rotateX: 0, rotateZ: 0 },
    animate: { x: -9, y: 1, z: 5, rotateY: (360 * Math.PI) / 180, rotateX: 0, rotateZ: 0 },
  };

  useFrame(() => {
    const { offset } = scroll;

    const handleWheel = (event: any) => {
      if (offset > 0.7) {
        setAtBuildPage(true);
      } else {
        setAtBuildPage(false);
      }
    };

    document.addEventListener("wheel", handleWheel, { passive: true });
  });

  return (
    <group {...props} position={[7, -7, -7]} dispose={null} ref={ref}>
      <motion.group
        initial="initial"
        animate={atBuildPage ? "animate" : "initial"}
        variants={variants}
        transition={{ duration: 6, type: "spring" }}
      >
        <mesh geometry={nodes.defaultMaterial.geometry} material={textureMaterial} scale={0.05} />
      </motion.group>
    </group>
  );
}

useGLTF.preload("/models/scene.gltf");
